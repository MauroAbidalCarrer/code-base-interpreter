bot_backend.py:
  config_openai_api: {}
  get_config: {}

functional.py:
  add_function_response_to_bot_history:
    arguments: The function response and the bot's conversation history.
    implementation: Adds the function call response to the bot's conversation history
      and handles the terminal output and image output generated by the function call.
    returns: Updates the bot's conversation history with the function call response
      and the output generated by the function call.
  chat_completion:
    arguments: The user's input and the bot's conversation history.
    implementation: Generates a completion or follow-up response for the user's input
      using an appropriate GPT model and API. It handles the interaction between the
      user and the AI code interpreter.
    returns: A completion or follow-up response generated based on the user's input
      and bot's conversation history.
  parse_json:
    arguments: The function arguments containing the non-standard JSON format string
      and a flag indicating if the JSON string is finished.
    implementation: Parses and extracts code from a non-standard JSON format string.
      It is used to handle the extraction of code directly from non-standard JSON
      string.
    returns: The code string if successfully parsed, otherwise returns None.

jupyter_backend.py:
  delete_color_control_char: {}

response_parser.py:
  parse_response: {}

web_ui.py:
  add_file:
    arguments: 'state_dict: Dictionary containing the bot_backend instance.

      history: Conversation history as a list.

      file: A file uploaded by the user.'
    implementation: Adds user uploaded file to the conversation history and triggers
      chat completion.
    returns: Returns the updated conversation history.
  add_text:
    arguments: 'state_dict: Dictionary containing the bot_backend instance.

      history: Conversation history as a list.

      text: User input text.'
    implementation: Adds user text input to the conversation history and triggers
      chat completion.
    returns: Returns the updated conversation history and a message to update the
      UI.
  bot:
    arguments: The code text to be executed.
    implementation: Handles the execution of user's Python code and retrieves the
      terminal output. It uses a Jupyter kernel to execute the code and remains active
      after execution, retaining all variables in memory.
    returns: The terminal output of the executed code, and if the code generates image
      output, it returns the text '[image]'.
  get_bot_backend:
    arguments: 'state_dict: Dictionary containing the bot_backend instance.

      '
    implementation: Initializes the BotBackend, manages configuration and API calls,
      handles user input, chat completion, and response parsing.
    returns: Returns the initialized BotBackend instance.
  initialization: {}
  refresh_file_display:
    arguments: The function does not take any arguments.
    implementation: The refresh_file_display function reads the file paths from the
      cache folder using the bot_backend. It then returns a list of file paths. If
      a file is not in a directory, it is added to the paths list.
    returns: A list of file paths.
  restart_bot_backend:
    arguments: The function does not take any arguments.
    implementation: The restart_bot_backend function restarts the bot's backend, including
      clearing files in the work directory and resetting conversation-related attributes.
    returns: The function does not return any value.
  restart_ui:
    arguments: The function takes the chat history as an argument.
    implementation: The restart_ui function clears the chat history and returns empty
      textbox and button elements for the chat UI.
    returns: The function returns an empty chat history, an interactive textbox, and
      non-interactive buttons for restarting, file upload, and undo upload.
  switch_to_gpt4:
    arguments: 'state_dict: Dictionary containing the bot_backend instance.

      whether_switch: Boolean indicating whether to switch to GPT-4.'
    implementation: Updates the GPT model choice to GPT-4 if available, else switches
      back to GPT-3.5.
    returns: None
  undo_upload_file:
    arguments: 'state_dict: Dictionary containing the bot_backend instance.

      history: Conversation history as a list.'
    implementation: Reverts the last uploaded file action and updates the conversation
      history.
    returns: Returns the updated conversation history and a message to update the
      UI.
